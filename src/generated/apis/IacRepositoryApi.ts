/* tslint:disable */
/* eslint-disable */
/**
 * codebox Api
 * codebox api
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { PaginatedRepositoryList, Repository, RepositoryCreationRequest } from "../models";
import {
    PaginatedRepositoryListFromJSON,
    PaginatedRepositoryListToJSON,
    RepositoryFromJSON,
    RepositoryToJSON,
    RepositoryCreationRequestFromJSON,
    RepositoryCreationRequestToJSON,
} from "../models";

export interface CreateRepositoryRequest {
    repositoryCreationRequest: RepositoryCreationRequest;
}

export interface GetRepositoryRequest {
    id: number;
}

export interface ListRepositoriesRequest {
    page?: number;
    size?: number;
}

/**
 *
 */
export class IacRepositoryApi extends runtime.BaseAPI {
    /**
     */
    async createRepositoryRaw(
        requestParameters: CreateRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Repository>> {
        if (
            requestParameters.repositoryCreationRequest === null ||
            requestParameters.repositoryCreationRequest === undefined
        ) {
            throw new runtime.RequiredError(
                "repositoryCreationRequest",
                "Required parameter requestParameters.repositoryCreationRequest was null or undefined when calling createRepository.",
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (
            this.configuration &&
            (this.configuration.username !== undefined || this.configuration.password !== undefined)
        ) {
            headerParameters["Authorization"] =
                "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request(
            {
                path: `/api/iac/repository/`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RepositoryCreationRequestToJSON(requestParameters.repositoryCreationRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async createRepository(
        requestParameters: CreateRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Repository> {
        const response = await this.createRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepositoryRaw(
        requestParameters: GetRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Repository>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling getRepository.",
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (
            this.configuration &&
            (this.configuration.username !== undefined || this.configuration.password !== undefined)
        ) {
            headerParameters["Authorization"] =
                "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request(
            {
                path: `/api/iac/repository/{id}/`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters.id)),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async getRepository(
        requestParameters: GetRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Repository> {
        const response = await this.getRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listRepositoriesRaw(
        requestParameters: ListRepositoriesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PaginatedRepositoryList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters["size"] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (
            this.configuration &&
            (this.configuration.username !== undefined || this.configuration.password !== undefined)
        ) {
            headerParameters["Authorization"] =
                "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request(
            {
                path: `/api/iac/repository/`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRepositoryListFromJSON(jsonValue));
    }

    /**
     */
    async listRepositories(
        requestParameters: ListRepositoriesRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PaginatedRepositoryList> {
        const response = await this.listRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
