/* tslint:disable */
/* eslint-disable */
/**
 * codebox Api
 * codebox api
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Repository } from './Repository';
import {
    RepositoryFromJSON,
    RepositoryFromJSONTyped,
    RepositoryToJSON,
} from './Repository';
import type { StateEnum } from './StateEnum';
import {
    StateEnumFromJSON,
    StateEnumFromJSONTyped,
    StateEnumToJSON,
} from './StateEnum';

/**
 * 
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * 
     * @type {number}
     * @memberof Mission
     */
    readonly id: number;
    /**
     * 
     * @type {Repository}
     * @memberof Mission
     */
    readonly repository: Repository;
    /**
     * 
     * @type {Date}
     * @memberof Mission
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Mission
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Mission
     */
    playbook: string;
    /**
     * 
     * @type {StateEnum}
     * @memberof Mission
     */
    state?: StateEnum;
    /**
     * 
     * @type {string}
     * @memberof Mission
     */
    output?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Mission
     */
    commit?: string | null;
}

/**
 * Check if a given object implements the Mission interface.
 */
export function instanceOfMission(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "repository" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "playbook" in value;

    return isInstance;
}

export function MissionFromJSON(json: any): Mission {
    return MissionFromJSONTyped(json, false);
}

export function MissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Mission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'repository': RepositoryFromJSON(json['repository']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'playbook': json['playbook'],
        'state': !exists(json, 'state') ? undefined : StateEnumFromJSON(json['state']),
        'output': !exists(json, 'output') ? undefined : json['output'],
        'commit': !exists(json, 'commit') ? undefined : json['commit'],
    };
}

export function MissionToJSON(value?: Mission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'playbook': value.playbook,
        'state': StateEnumToJSON(value.state),
        'output': value.output,
        'commit': value.commit,
    };
}

