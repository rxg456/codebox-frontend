/* tslint:disable */
/* eslint-disable */
/**
 * codebox Api
 * codebox api
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MissionEvent
 */
export interface MissionEvent {
    /**
     * 
     * @type {number}
     * @memberof MissionEvent
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    state: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    host: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    play: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    playPattern: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    task: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    taskAction: string;
    /**
     * 
     * @type {string}
     * @memberof MissionEvent
     */
    taskArgs: string;
    /**
     * 
     * @type {Date}
     * @memberof MissionEvent
     */
    start?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof MissionEvent
     */
    end?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof MissionEvent
     */
    duration?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof MissionEvent
     */
    res?: { [key: string]: any; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof MissionEvent
     */
    changed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MissionEvent
     */
    mission: number;
}

/**
 * Check if a given object implements the MissionEvent interface.
 */
export function instanceOfMissionEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "play" in value;
    isInstance = isInstance && "playPattern" in value;
    isInstance = isInstance && "task" in value;
    isInstance = isInstance && "taskAction" in value;
    isInstance = isInstance && "taskArgs" in value;
    isInstance = isInstance && "mission" in value;

    return isInstance;
}

export function MissionEventFromJSON(json: any): MissionEvent {
    return MissionEventFromJSONTyped(json, false);
}

export function MissionEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): MissionEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'state': json['state'],
        'uuid': json['uuid'],
        'host': json['host'],
        'play': json['play'],
        'playPattern': json['play_pattern'],
        'task': json['task'],
        'taskAction': json['task_action'],
        'taskArgs': json['task_args'],
        'start': !exists(json, 'start') ? undefined : (json['start'] === null ? null : new Date(json['start'])),
        'end': !exists(json, 'end') ? undefined : (json['end'] === null ? null : new Date(json['end'])),
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'res': !exists(json, 'res') ? undefined : json['res'],
        'changed': !exists(json, 'changed') ? undefined : json['changed'],
        'mission': json['mission'],
    };
}

export function MissionEventToJSON(value?: MissionEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'state': value.state,
        'uuid': value.uuid,
        'host': value.host,
        'play': value.play,
        'play_pattern': value.playPattern,
        'task': value.task,
        'task_action': value.taskAction,
        'task_args': value.taskArgs,
        'start': value.start === undefined ? undefined : (value.start === null ? null : value.start.toISOString()),
        'end': value.end === undefined ? undefined : (value.end === null ? null : value.end.toISOString()),
        'duration': value.duration,
        'res': value.res,
        'changed': value.changed,
        'mission': value.mission,
    };
}

